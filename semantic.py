# Practical Task 1
# 1) Create a file called semantic.py and run all the code extracts above.

# Loads the spaCy library for natural language processing tasks
import spacy 

# Loads the advanced English language model provided by spaCy
nlp = spacy.load("en_core_web_md")

word1 = nlp("cat")
word2 = nlp("monkey")
word3 = nlp("banana")

print(word1.similarity(word2))
print(word3.similarity(word2))
print(word3.similarity(word1))

tokens = nlp ("cat apple monkey banana")

for token1 in tokens:
    for token2 in tokens:
        print(token1.text, token2.text, token1.similarity(token2))

sentence_to_compare = "Why is my cat on the car"

sentences = ["Where did my dog go",
    "Hello, there is my car",
    "I've lost my car in my car",
    "I'd like my boat back",
    "I will name my dog Diana"
]

model_sentence = nlp(sentence_to_compare)

for sentence in sentences:
    similarity = nlp(sentence).similarity(model_sentence)
    print (sentence +  " - "  + str(similarity))


# 2) Write a note on what you noticed about the similarities between cat, monkey and banana and think of an example of your own.

# Note on the similarity between "cat", "monkey" and "banana":

# The similarity score between "cat" and "monkey" is 0.59, which is the highest score between the group of words.
# This makes sense as the cause is likely to be due to the fact both are animals. 
# There is a relationship between the two in terms of how they are used in language. 

# The similarity score between "monkey" and "banana" is 0.40, which is lower than "cat" and "monkey" but still high.
# This also makes sense as the cause is likely because monkeys are associated with bananas.
# There is a relationship between the two, as it something that we believe they eat on a regular basis.

# The similarity score between "cat" and "banana" is 0.22, which is quite low, suggesting that these words are not closely related. 
# There is no typical relationship between the two, as one is an animal and the other is a fruit. 
# These two words often do not appear together in language contexts. Hence, the low similarity score. 
    
# Example of my own
word4 = nlp("London")
word5 = nlp("Football")
word6 = nlp("Sport")

print(word4.similarity(word5))
print(word6.similarity(word5))
print(word6.similarity(word4))

# 3) Run the example file on with the simpler language model en_core_web_sm 
# and write a note on what you notice may be different from the model en_core_web_md

# Notes on en_core_web_sm vs en_core_web_md:

"""The simpler language model en_core_web_sm lacks word vectors, this reduces the effectiveness in apprehending semantic similarities
compared to the en_core_web_md model, which incorporates word vectors for more sophisticated text understanding. As a result,
when comparing texts for similarity using the en_core_web_sm model, we observe differences in similarity scores, leading to 
less accurate or lower scores than those generated by the en_core_web_md model. This diffference arise from the 
en_core_web_sm model's dependancy on the context surrounding the words, without the added benefit of word vectors to enrich its 
coprehension of the text. Word vectors serve as numerical representations of words, giving their meanings, relationships, and
context, providing computers to comprehend language similarly to humans."""

# Practical Task 2

# Loads the pandas library 
import pandas as pd

# Reading text file as a DataFrame with ':' as the separator
df = pd.read_csv('movies.txt',sep=':', header=None, names=['Movie', 'Description'])

print(df)

# Description of "Planet Hulk"
Movie = input(str("""Please enter a movie description of your choice, based on the description
we will look through our movies database, and provide you a movie which has 
a high similarity to that description you provided, so you can enjoy a recommend movie!: """))

# Defining a function to recommend a movie based on a given description
def recommend_movie(description):
    # Process the input description with nlp
    doc = nlp(description)
    # Initialize variables to track the movie title and its similarity score
    recommended_movie = None
    max_similarity = -1
    
    # Iterate over each movie description in the DataFrame
    for index, row in df.iterrows():
        # Process the movie description
        movie_doc = nlp(row['Description'])
        # Calculate the similarity between the input description and the current movie description
        similarity = doc.similarity(movie_doc)
        
        # Update the recommended movie if the current movie has higher similarity
        if similarity > max_similarity:
            max_similarity = similarity
            recommended_movie = row['Movie']
    
    # Return the recommended movie and its similarity score
    return recommended_movie, max_similarity

# Call the function to recommend a movie based on the description provided by user
recommended_movie_title, similarity_score = recommend_movie(Movie)

# Print the recommended movie and its similarity score
print("Recommended Movie:", recommended_movie_title)
print("Similarity Score:", similarity_score)
print (f"The recommended movie is {recommended_movie_title} because it has the similarity score of {similarity_score}, which is the highest similarity to the movie description you have provided!")